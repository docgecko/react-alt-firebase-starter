'use strict';

var React = require('react');
var assert = require('assert');
var a11y = require('../index');
var assertions = require('../assertions');

var k = function k() {};

var captureWarnings = function captureWarnings(fn) {
  var _warn = console.warn;
  var msgs = {};
  console.warn = function (id, msg) {
    return msgs[msg] = true;
  };
  fn();
  console.warn = _warn;
  return msgs;
};

var expectWarning = function expectWarning(expected, fn) {
  var msgs = captureWarnings(fn);
  assert(msgs[expected], 'Did not get expected warning "' + expected + '"\ngot these warnings:\n' + Object.keys(msgs).join('\n'));
};

var doNotExpectWarning = function doNotExpectWarning(notExpected, fn) {
  var msgs = captureWarnings(fn);
  assert(msgs[notExpected] == null, 'Did not expect a warning but got "' + notExpected + '"');
};

describe('props', function () {
  var createElement = React.createElement;

  before(function () {
    a11y(React);
  });

  after(function () {
    React.createElement = createElement;
  });

  describe('onClick', function () {

    describe('labels', function () {
      it('warns if there is no label of any sort', function () {
        expectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement('div', { onClick: k });
        });
      });

      it('does not warn if onClick is null', function () {
        doNotExpectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement('div', { onClick: null });
        });
      });

      it('does not warn if onClick is undefined', function () {
        doNotExpectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement('div', { onClick: undefined });
        });
      });

      it('does not warn if there is an aria-label', function () {
        doNotExpectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement('div', { 'aria-label': 'foo', onClick: k });
        });
      });

      it('does not warn if there is an aria-labelled-by', function () {
        doNotExpectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement('div', { 'aria-labelled-by': 'foo', onClick: k });
        });
      });

      it('does not warn if there are text node children', function () {
        doNotExpectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement(
            'div',
            { onClick: k },
            'foo'
          );
        });
      });

      it('does not warn if there are deeply nested text node children', function () {
        doNotExpectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement(
            'div',
            { onClick: k },
            React.createElement(
              'span',
              null,
              React.createElement(
                'span',
                null,
                'foo'
              )
            )
          );
        });
      });

      it('does not error if there are undefined children', function () {
        var undefChild;
        doNotExpectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement(
            'div',
            { onClick: k },
            undefChild,
            ' bar'
          );
        });
      });

      it('does not error if there are null children', function () {
        doNotExpectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement(
            'div',
            { onClick: k },
            'bar ',
            null
          );
        });
      });

      it('does not warn if there is an image with an alt attribute', function () {
        doNotExpectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement(
            'div',
            { onClick: k },
            React.createElement('img', { src: '#', alt: 'Foo' })
          );
        });
      });

      it('warns if there is an image with an empty alt attribute', function () {
        expectWarning(assertions.props.onClick.NO_LABEL.msg, function () {
          React.createElement(
            'div',
            { onClick: k },
            React.createElement('img', { src: '#', alt: '' })
          );
        });
      });
    });

    describe('when role="button"', function () {
      it('requires onKeyDown', function () {
        expectWarning(assertions.props.onClick.BUTTON_ROLE_SPACE.msg, function () {
          React.createElement('span', { onClick: k, role: 'button' });
        });
      });

      it('requires onKeyDown', function () {
        expectWarning(assertions.props.onClick.BUTTON_ROLE_ENTER.msg, function () {
          React.createElement('span', { onClick: k, role: 'button' });
        });
      });
    });

    it('warns without role', function () {
      expectWarning(assertions.props.onClick.NO_ROLE.msg, function () {
        React.createElement('div', { onClick: k });
      });
    });

    it('does not warn with role', function () {
      doNotExpectWarning(assertions.props.onClick.NO_ROLE.msg, function () {
        React.createElement('div', { onClick: k, role: 'button' });
      });
    });
  });

  describe('tabIndex', function () {
    describe('when element is not interactive', function () {
      it('warns without tabIndex', function () {
        expectWarning(assertions.props.onClick.NO_TABINDEX.msg, function () {
          React.createElement('div', { onClick: k });
        });
      });

      it('does not warn when tabIndex is present', function () {
        doNotExpectWarning(assertions.props.onClick.NO_TABINDEX.msg, function () {
          React.createElement('div', { onClick: k, tabIndex: '0' });
        });
      });

      it('does not warn when tabIndex is present', function () {
        doNotExpectWarning(assertions.props.onClick.NO_TABINDEX.msg, function () {
          React.createElement('div', { onClick: k, tabIndex: 0 });
        });
      });
    });

    describe('when element is interactive', function () {
      it('does not warn about tabIndex with a[href]', function () {
        doNotExpectWarning(assertions.props.onClick.NO_TABINDEX.msg, function () {
          React.createElement('a', { onClick: k, href: 'foo' });
        });
      });

      it('does not warn about buttons', function () {
        doNotExpectWarning(assertions.props.onClick.NO_TABINDEX.msg, function () {
          React.createElement('button', { onClick: k });
        });
      });
    });
  });
});

describe('tags', function () {
  var createElement = React.createElement;

  before(function () {
    a11y(React);
  });

  after(function () {
    React.createElement = createElement;
  });

  describe('img', function () {
    it('requires alt attributes', function () {
      expectWarning(assertions.tags.img.MISSING_ALT.msg, function () {
        React.createElement('img', { src: 'foo.jpg' });
      });
    });

    it('ignores proper alt attributes', function () {
      doNotExpectWarning(assertions.tags.img.MISSING_ALT.msg, function () {
        React.createElement('img', { src: 'foo.jpg', alt: 'a foo, ofc' });
      });
    });

    it('dissallows the word "image" in the alt attribute', function () {
      expectWarning(assertions.tags.img.REDUDANT_ALT.msg, function () {
        React.createElement('img', { src: 'cat.gif', alt: 'image of a cat' });
      });
    });
  });

  describe('a', function () {
    describe('with [href="#"]', function () {
      it('warns', function () {
        expectWarning(assertions.tags.a.HASH_HREF_NEEDS_BUTTON.msg, function () {
          React.createElement('a', { onClick: k, href: '#' });
        });
      });
    });

    describe('with a real href', function () {
      it('does not warn', function () {
        doNotExpectWarning(assertions.tags.a.HASH_HREF_NEEDS_BUTTON.msg, function () {
          React.createElement('a', { onClick: k, href: '/foo/bar' });
        });
      });
    });
  });
});

describe('filterFn', function () {
  var createElement = React.createElement;

  before(function () {
    var barOnly = function barOnly(name, id, msg) {
      return id === 'bar';
    };

    a11y(React, { filterFn: barOnly });
  });

  after(function () {
    React.createElement = createElement;
  });

  describe('when the source element has been filtered out', function () {
    it('does not warn', function () {
      doNotExpectWarning(assertions.tags.img.MISSING_ALT.msg, function () {
        React.createElement('img', { id: 'foo', src: 'foo.jpg' });
      });
    });
  });

  describe('when there are filtered results', function () {
    it('warns', function () {
      expectWarning(assertions.tags.img.MISSING_ALT.msg, function () {
        React.createElement(
          'div',
          null,
          React.createElement('img', { id: 'foo', src: 'foo.jpg' }),
          React.createElement('img', { id: 'bar', src: 'foo.jpg' })
        );
      });
    });
  });
});

describe('getFailures()', function () {
  var createElement = React.createElement;

  before(function () {
    a11y(React);
  });

  after(function () {
    React.createElement = createElement;
  });

  describe('when there are failures', function () {
    it('returns the failures', function () {
      React.createElement(
        'div',
        null,
        React.createElement('img', { id: 'foo', src: 'foo.jpg' }),
        React.createElement('img', { id: 'bar', src: 'foo.jpg' })
      );

      assert(a11y.getFailures().length == 2);
    });
  });
});

describe('device is set to mobile', function () {
  var createElement = React.createElement;

  before(function () {
    a11y(React, { device: ['mobile'] });
  });

  after(function () {
    React.createElement = createElement;
  });

  describe('when role="button"', function () {
    it('does not require onKeyDown', function () {
      doNotExpectWarning(assertions.props.onClick.BUTTON_ROLE_SPACE.msg, function () {
        React.createElement('span', { onClick: k, role: 'button' });
      });
    });

    it('does not require onKeyDown', function () {
      doNotExpectWarning(assertions.props.onClick.BUTTON_ROLE_ENTER.msg, function () {
        React.createElement('span', { onClick: k, role: 'button' });
      });
    });
  });
});